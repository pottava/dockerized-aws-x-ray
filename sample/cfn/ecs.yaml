AWSTemplateFormatVersion: 2010-09-09
Description: "X-Ray sample application"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configuration
        Parameters:
          - InstanceType
          - KeyName

Parameters:
  InstanceType:
    Description: Which instance type should we use to build the ECS cluster
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.10.0/24
    Public2:
      CIDR: 10.0.20.0/24

  AWSRegionToAMI:
    us-east-1:
      AMI: ami-9eb4b1e5
    us-east-2:
      AMI: ami-1c002379
    us-west-1:
      AMI: ami-4a2c192a
    us-west-2:
      AMI: ami-1d668865
    eu-west-1:
      AMI: ami-8fcc32f6
    eu-west-2:
      AMI: ami-cb1101af
    eu-central-1:
      AMI: ami-0460cb6b
    ap-northeast-1:
      AMI: ami-b743bed1
    ap-southeast-1:
      AMI: ami-9d1f7efe
    ap-southeast-2:
      AMI: ami-c1a6bda2
    ca-central-1:
      AMI: ami-b677c9d2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public1
          - CIDR
      Tags:
        - Key: Name
          Value: "Public Subnet 1"
        - Key: Application
          Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public2
          - CIDR
      Tags:
        - Key: Name
          Value: "Public Subnet 2"
        - Key: Application
          Value: !Ref AWS::StackName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
        - Key: Application
          Value: !Ref AWS::StackName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: XRayALBSecGrp
        - Key: Application
          Value: !Ref AWS::StackName

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Container instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: XRayInstanceSecGrp
        - Key: Application
          Value: !Ref AWS::StackName

  EC2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroup

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
      Path: /

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        RetentionInDays: 1

  SampleCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  SampleTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: /

  SampleTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        - Name: web
          Image: pottava/http-re
          PortMappings: 
            - ContainerPort: 80
              HostPort: 0
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_CFN_STACK_NAME
              Value: !Ref AWS::StackName
          Cpu: 10
          MemoryReservation: 64
          Memory: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Essential: true
      Family: !Ref AWS::StackName
      TaskRoleArn: !Ref SampleTaskRole

  ServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - Effect: Allow
            Principal: 
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /

  SampleService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref SampleCluster
      TaskDefinition: !Ref SampleTask
      Role: !Ref ServiceRole
      DesiredCount: 1
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
          ContainerName: web
    DependsOn:
      - Listener

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 15
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      DesiredCapacity: 1
      MaxSize: 1
      MinSize: 0
      MetricsCollection:
        - Granularity: 1Minute
      HealthCheckGracePeriod: 120
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: true
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
      SecurityGroups:
        - !Ref EC2SecurityGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/ecs/ecs.config":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  ECS_CLUSTER=${SampleCluster}
                  ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
                  ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=10s

            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}

            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

Outputs:
  Task:
    Description: An ECS task definition
    Value: !Ref SampleTask

  Service:
    Description: An ECS service
    Value: !Ref SampleService

  LoadBalancer:
    Description: An endpoint of the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName
